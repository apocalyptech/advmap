Bugs to fix:

 * Three-line title will overlap "(notes)" on my Laptop display.
   Since the move to Qt, actually, three-line titles will end up
   bumping into the notes field anyway, though not as badly as
   on the Gtk version on the laptop.

 * I think our lines aren't as strong as they could be - aliasing
   or something is getting in the way.  While implementing our own
   dashpattern stuff, those dashes were helped out significantly
   by adding .5 to their pen's width - I wonder if something like
   that should be applied globally?  Straight lines *do* look
   sharper if we disable the antialiasing renderhint altogether,
   but that makes all our diagonals look awful.

 * Our custom dashed lines benefit greatly from a call to
   pen.setCapStyle(QtCore.Qt.FlatCap) - would that help out other
   line drawing cases as well?  When connections bend to new
   directions, if you look closely enough, there's noticeable
   overlap where they meet, for instance.

 * If one of these Qt bugs ever gets fixed:
    https://bugreports.qt.io/browse/QTBUG-63322
    https://bugreports.qt.io/browse/QTBUG-63386
   ... get rid of our draw_dashed_line function and go back to
   using setDashPattern() like I'd love to be doing.

Features to implement:

 * write whole group out to PNG

 * Different ways to draw nonsymmetric links (thinking "rounded" and
   "midpoint" at the least)

 * Show "(notes)" indicator on map for Label rooms?

 * Expand our room tooltips - should be able to summarize most of the
   info in there, I'd think.

 * Should really draw some little icons for mouseovers, instead of just
   highlighting in green

 * Undo/Redo would be real nice

 * Popup when LMB on a connection to edit conn attributes (should be much
   more manageable than our previous Advanced tab on Room Edit)

 * Better one-way arrows for ladder connections.  What we do right now
   is technically Good Enough, but it doesn't really look great.

 * I'd really like to start unit-testing the GUI; apparently there
   *is* a QTest class, or something, which can assist with this.

 * QInputDialog.getText() doesn't let you specify custom buttons; would
   be nice to use our standard ones with icons, so I may need to write
   my own class to do that.
 
 * User-editable keybindings.  I suspect I'd probably never get to the
   point of having a preferences menu for it, but at least having a config
   file would be nice.

Things to consider:

 * Should we still be able to edit Notes in readonly mode?

 * Multiple links from the same direction
   -> Have that partially, now - can have multiple ends on the same room,
      at least.  Should we support multi-room connections?  I'm not
      sure if that'd be useful anywhere.  Presumably there's an
      Infocom title out there *somewhere* in which it would help.  The
      bank puzzle from Zork II could technically make use of such a
      construct.

 * Double-sized rooms, or even arbitrarily-large room.  Sort of a
   super-group where the room itself takes over space instead of just
   the background notification

 * Our current handling of QGraphicsScene/QGraphicsView owes a lot to how
   we were handling things back in the Gtk+ version - namely, that when
   changes occur to the data, we trigger a complete recreation of the
   entire scene, rather than try to keep track of changes.  The datasets
   involved here are small enough by modern computers that it doesn't
   really matter, but it's still pretty inefficient.  Really we should
   be just updating what's changed and keeping the rest of the scene
   intact.  That's more work than I cared to deal with, since we'd have
   a lot of QGraphics*Items lying around all over the place, but it's
   something to consider for the future.
